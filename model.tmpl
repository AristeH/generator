{{- $table := .View.Name -}}
// Code generated. DO NOT EDIT.

package model

import (
	"encoding/xml"
	"encoding/json"
	{{if .Integer}}  "strconv" {{end}}
    {{if .Time}}  "time"{{end}}
	"io/ioutil"
	"os"
	"fmt"
	"пппппп/server/config"
	"strings"
)
// {{ $table }} таблица БД
type {{ $table }} struct {
{{- range .Fields }}
	{{ .FieldName }} {{  .FIELD_TYPE }} `json:"{{ .View.TagJSON }}" db:"{{ .FieldName }}"` // {{  .FieldName }}
{{- end }}
}

//{{ $table }}List - список с описанием полей Fields  и записями Recs
type {{ $table }}List struct {
	Fields []FieldSection
    Recs []{{ $table }} `json:"{{ .View.TagJSON }}"`
}

func  (ob *{{$table}}) Create() error{
    sqlstr := `create table {{ $table }}  ({{ .Spisok }})
                         CONSTRAINT CODETEL_PK PRIMARY KEY (ID));`
    _, err := config.DB.Exec(sqlstr)
   	if err != nil {
   	   return err
	}
	return nil
}

func (ob *{{$table}}) Delete() error{
   const sqlstr = `DELETE FROM {{ $table }}  WHERE ID =  ?`
		_, err := config.DB.Exec(sqlstr, ob.ID)
		if err != nil {
			return err
		}
		return nil
}

func (ob *{{$table}}) Save() error{
   sqlstr := "update or insert into  {{ $table }}  ({{ .Spisok }}) "+
   " values ({{ .Vopr }})" +
   " matching (ID)"
   _, err := config.DB.Exec(sqlstr,  {{ .Spisokob }})
   if err != nil {
     return err
   }
   return nil
}

// Read - прочтем из БД строку с индентификатором id
func (ob *{{$table}}) Read(id string) error{
	return config.DB.QueryRowx("SELECT * FROM {{ $table }} WHERE ID=?", id).StructScan(ob)
}

// ReadFromJSON - прочтем из JSON  файла и обновим таблицу БД
func (ob {{.View.Name}}) ReadFromJSON(file string){
	var recs {{ .View.Name }}List
	jsonFile, err := os.Open(file)
	defer jsonFile.Close()
	if err != nil {
		fmt.Println(err.Error())
	}
	byteValue, _ := ioutil.ReadAll(jsonFile)
	json.Unmarshal(byteValue, &recs)

	for i := 0; i < len(recs.Recs); i++ {
{{- range .Fields }}
	   ob.{{.FieldName  }} = recs.Recs[i].{{ .FieldName  }}
{{- end }}
	   ob.Save()
	}

}


// FormElement - возвращает данные из строки БД с описанием и кнопками
func  (ob *{{.View.Name}})  FormElement() string{
  	v := ListForm{
		Name:  "ListForm",
		Title: "{{.View.Form}}",
		Stroki: []arrayFieldSection{
        {{- range .Fields }}
	        { 
	  		    Fields: []FieldSection{
					{
						Name:     "{{ .View.Form }}",
						Value: {{if  eq .FIELD_TYPE "string"}}  ob.{{ .FieldName }}, {{end}}  {{if  eq .FIELD_TYPE "int"}}   strconv.Itoa(ob.{{ .FieldName }}), {{end}} {{if  eq .FIELD_TYPE "bool"}}   strconv.FormatBool(ob.{{ .FieldName }}), {{end}}  {{if  eq .FIELD_TYPE "time.Time"}}   ob.{{ .FieldName }}.Format("2006/01/02"), {{end}}       
    					Buttons: "",
					},
				},
			},
        {{- end }}

		},
		Buttons: []Button{
			{
				Name:       "Записать",
				Parameters: "table:{{.View.Name}}; ob: "+ strconv.Itoa(ob.ID),
				Image:      "Regular_Save",
			},
			{
				Name:       "Отмена",
				Parameters: "cancel",
				Image:      "Regular_ShareSquare",
			},
		},
	}

	output, err := xml.Marshal(v)
	if err != nil {
		fmt.Printf("error: %v\n", err)
	}

	return string(output)

}
// FormSpisok - возвращает список строк с описанием
func  (ob *{{.View.Name}})  FormSpisok() GridList{ 
	var l GridList
    pp := []{{$table}}{}
    err := config.DB.Select(&pp, "SELECT * FROM {{$table}} ")
	if err != nil {
		fmt.Printf("error: %v\n", err)
	}
    l.Recs =  make([]string, len(pp))
    for i := 0; i < len(pp); i++ {
    {{- range  .Fields }}
	   l.Recs[i] = l.Recs[i] + "," +{{if  eq .FIELD_TYPE "string"}}  pp[i].{{ .FieldName }} {{end}}  {{if  eq .FIELD_TYPE "int"}}   strconv.Itoa(pp[i].{{ .FieldName }}) {{end}}  {{if  eq .FIELD_TYPE "bool"}}   strconv.FormatBool(pp[i].{{ .FieldName }}) {{end}}  {{if  eq .FIELD_TYPE "time.Time"}}   pp[i].{{ .FieldName }}.Format("2006/01/02") {{end}}  
    {{- end }}
	   l.Recs[i] = strings.TrimLeft(l.Recs[i], ",")
	}

	F:=[]FieldSection{
    {{- range .Fields }}
	    {
			Name:     "{{ .View.Form }}",
			Value: {{if  eq .FIELD_TYPE "string"}}  ob.{{ .FieldName }}, {{end}}  {{if  eq .FIELD_TYPE "int"}}   strconv.Itoa(ob.{{ .FieldName }}), {{end}}  {{if  eq .FIELD_TYPE "bool"}}   strconv.FormatBool(ob.{{ .FieldName }}), {{end}}  {{if  eq .FIELD_TYPE "time.Time"}}   ob.{{ .FieldName }}.Format("2006/01/02"), {{end}}  
			Tip: "{{.FIELD_TYPE}}",		     
    	},			
    {{- end }}
	}
	l.Fields = F

	return l
}